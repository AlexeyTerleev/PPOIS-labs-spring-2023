# -*- coding: utf-8 -*-
from typing import NoReturn, List

# Author: Vodohleb04
# Form implementation generated from reading ui file 'searchDialogWindow.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from enum import Enum
from book import Book
from library import SearchRemoveBy


class SearchTypeNames(Enum):
    SEARCH_NOT_CHOSEN = "Поиск..."
    NAME = "по названию"
    AUTHORS = "по авторам"
    AUTHORS_PUBLISHING_HOUSE = "по издательству и авторам"
    VOLUMES = "по числу томов"
    PUBLISHED = "по тиражу"
    PUBLISHED_VOLUMES = "по количеству выпущенных томов"


class Ui_searchDialog(object):

    @property
    def found_books(self) -> List[Book]:
        return self._found_books

    @found_books.setter
    def found_books(self, new_books_list: List[Book]) -> NoReturn:
        self._found_books = new_books_list

    def setupUi(self, ui_main_window, searchDialog, data_controller):
        self._found_books = []
        searchDialog.setObjectName("searchDialog")
        searchDialog.resize(1130, 503)
        searchDialog.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("icons/png-transparent-computer-icons-magnifying-glass-magnifier-magnifying-glass-text-interface-magnifier-thumbnail-removebg-preview.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        searchDialog.setWindowIcon(icon)
        searchDialog.setStyleSheet("background-color: rgb(255, 225, 230);")
        self.dialogButtonBox = QtWidgets.QDialogButtonBox(searchDialog)
        self.dialogButtonBox.setGeometry(QtCore.QRect(950, 450, 171, 32))
        self.dialogButtonBox.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.dialogButtonBox.setStyleSheet("background-color: rgb(199, 214, 255);")
        self.dialogButtonBox.setOrientation(QtCore.Qt.Horizontal)
        self.dialogButtonBox.setStandardButtons(QtWidgets.QDialogButtonBox.Cancel|QtWidgets.QDialogButtonBox.Ok)
        self.dialogButtonBox.setObjectName("dialogButtonBox")
        self.dialogButtonBox.button(self.dialogButtonBox.Ok).setEnabled(False)
        self.table = QtWidgets.QTableWidget(searchDialog)
        self.table.setGeometry(QtCore.QRect(0, 0, 1131, 451))
        self.table.setMaximumSize(QtCore.QSize(1131, 16777215))
        self.table.setStyleSheet("background-color: rgb(199, 214, 255);")
        self.table.setHorizontalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)
        self.table.setSizeAdjustPolicy(QtWidgets.QAbstractScrollArea.AdjustToContentsOnFirstShow)
        self.table.setAutoScroll(True)
        self.table.setDragEnabled(False)
        self.table.setDragDropOverwriteMode(True)
        self.table.setAlternatingRowColors(False)
        self.table.setObjectName("table")
        self.table.setColumnCount(6)
        self.table.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.table.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.table.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.table.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.table.setHorizontalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        self.table.setHorizontalHeaderItem(4, item)
        item = QtWidgets.QTableWidgetItem()
        self.table.setHorizontalHeaderItem(5, item)
        self.table.horizontalHeader().setCascadingSectionResizes(False)
        self.table.horizontalHeader().setDefaultSectionSize(188)
        self.table.horizontalHeader().setMinimumSectionSize(40)
        self.table.verticalHeader().setCascadingSectionResizes(False)
        self.table.verticalHeader().setSortIndicatorShown(False)
        self.table.verticalHeader().setStretchLastSection(False)
        self.searchComboBox = QtWidgets.QComboBox(searchDialog)
        self.searchComboBox.setGeometry(QtCore.QRect(10, 450, 271, 31))
        self.searchComboBox.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.searchComboBox.setStyleSheet("background-color: rgb(199, 214, 255);")
        self.searchComboBox.setObjectName("searchComboBox")
        self.searchComboBox.addItem("")
        self.searchComboBox.addItem("")
        self.searchComboBox.addItem("")
        self.searchComboBox.addItem("")
        self.searchComboBox.addItem("")
        self.searchComboBox.addItem("")
        self.searchComboBox.addItem("")
        self.startSearch = QtWidgets.QPushButton(searchDialog)
        self.startSearch.setEnabled(False)
        self.startSearch.setGeometry(QtCore.QRect(290, 450, 121, 34))
        self.startSearch.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        self.startSearch.setStyleSheet("background-color: rgb(199, 214, 255);")
        self.startSearch.setIcon(icon)
        self.startSearch.setObjectName("startSearch")

        self.retranslateUi(searchDialog)
        self.dialogButtonBox.accepted.connect(searchDialog.accept)
        self.dialogButtonBox.rejected.connect(searchDialog.reject)
        QtCore.QMetaObject.connectSlotsByName(searchDialog)

        self.searchComboBox.textActivated.connect(lambda: self.connect_choose_type_of_search(data_controller))
        self.connect_search(searchDialog, data_controller)

        self.connect_cell_changed()
        self.dialogButtonBox.accepted.connect(lambda: self.connect_update_books(ui_main_window,
                                                                                searchDialog,
                                                                                data_controller))
        self.dialogButtonBox.button(self.dialogButtonBox.Cancel).clicked.connect(
            lambda: data_controller.choose_search_type(None))


    def retranslateUi(self, searchDialog):
        _translate = QtCore.QCoreApplication.translate
        searchDialog.setWindowTitle(_translate("searchDialog", "Поиск"))
        item = self.table.horizontalHeaderItem(0)
        item.setText(_translate("searchDialog", "Название книги"))
        item = self.table.horizontalHeaderItem(1)
        item.setText(_translate("searchDialog", "Авторы"))
        item = self.table.horizontalHeaderItem(2)
        item.setText(_translate("searchDialog", "Издательство"))
        item = self.table.horizontalHeaderItem(3)
        item.setText(_translate("searchDialog", "Количество томов"))
        item = self.table.horizontalHeaderItem(4)
        item.setText(_translate("searchDialog", "Тираж"))
        item = self.table.horizontalHeaderItem(5)
        item.setText(_translate("searchDialog", "Выпущено томов"))

        self.searchComboBox.setItemText(0, _translate("searchDialog", SearchTypeNames.SEARCH_NOT_CHOSEN.value))
        self.searchComboBox.setItemText(1, _translate("searchDialog", SearchTypeNames.AUTHORS.value))
        self.searchComboBox.setItemText(2, _translate("searchDialog", SearchTypeNames.AUTHORS_PUBLISHING_HOUSE.value))
        self.searchComboBox.setItemText(3, _translate("searchDialog", SearchTypeNames.VOLUMES.value))
        self.searchComboBox.setItemText(4, _translate("searchDialog", SearchTypeNames.NAME.value))
        self.searchComboBox.setItemText(5, _translate("searchDialog", SearchTypeNames.PUBLISHED.value))
        self.searchComboBox.setItemText(6, _translate("searchDialog", SearchTypeNames.PUBLISHED_VOLUMES.value))
        self.startSearch.setText(_translate("searchDialog", "Начать поиск"))

    def connect_search(self, searchDialog, data_controller) -> NoReturn:
        self.startSearch.clicked.connect(lambda: data_controller.find_books(self, search_dialog_window=searchDialog))

    def connect_choose_type_of_search(self, data_controller) -> NoReturn:
        search_type = None
        if self.searchComboBox.currentIndex() == 0:
            self.startSearch.setEnabled(False)
        else:
            self.startSearch.setEnabled(True)
            if self.searchComboBox.currentText() == SearchTypeNames.AUTHORS.value:
                search_type = SearchRemoveBy.AUTHORS
            elif self.searchComboBox.currentText() == SearchTypeNames.AUTHORS_PUBLISHING_HOUSE.value:
                search_type = SearchRemoveBy.PUBLISHING_HOUSE_AND_AUTHORS
            elif self.searchComboBox.currentText() == SearchTypeNames.NAME.value:
                search_type = SearchRemoveBy.BOOK_NAME
            elif self.searchComboBox.currentText() == SearchTypeNames.VOLUMES.value:
                search_type = SearchRemoveBy.VOLUMES_AMOUNT
            elif self.searchComboBox.currentText() == SearchTypeNames.PUBLISHED.value:
                search_type = SearchRemoveBy.PUBLISHED_AMOUNT
            elif self.searchComboBox.currentText() == SearchTypeNames.PUBLISHED_VOLUMES.value:
                search_type = SearchRemoveBy.PUBLISHED_VOLUMES_AMOUNT
        data_controller.choose_search_type(search_type)

    def connect_cell_changed(self) -> NoReturn:
        self.table.cellChanged.connect(lambda: self.dialogButtonBox.button(self.dialogButtonBox.Ok).setEnabled(True))

    def connect_update_books(self, ui_main_window, searchDialog, data_controller) -> NoReturn:
        result = QtWidgets.QMessageBox.question(
            searchDialog,
            "Подтверждение изменений",
            "Вы действительно хотите применить изменения в таблице?",
            QtWidgets.QMessageBox.Yes | QtWidgets.QMessageBox.No,
            QtWidgets.QMessageBox.No)
        if result == QtWidgets.QMessageBox.Yes:
            data_controller.read_data_in_ui_search_table(self, ui_main_window)

